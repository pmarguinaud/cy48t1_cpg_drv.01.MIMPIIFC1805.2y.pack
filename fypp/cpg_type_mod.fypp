#:set ISARG = 0
#:set ELARG = 1
#:set NDIMS = 2
#:set NTYPE = 3
#:set NCOND = 4
#:set NDEFS = 5
#:set AS_void                 = []
#:set AS_0_nflevg             = [ [ '0', 'NLEV' ] ]
#:set AS_1_nflevg             = [ [ '1', 'NLEV' ] ]
#:set AS_0_nflevg_6           = [ [ '1', 'NLEV' ], [ '1', '6' ] ]
#:set AS_4D                   = [ [], [] ]

#:set vars_cpg_dyn = { &                                                                                         
& "OROGL"          : [False, False, AS_void,          None,        "LLT0"               ], &
& "OROGM"          : [False, False, AS_void,          None,        "LLT0"               ], &
& "OROGLL"         : [False, False, AS_void,          None,        "LNHDYN .AND. LLT0"  ], &
& "OROGMM"         : [False, False, AS_void,          None,        "LNHDYN .AND. LLT0"  ], &
& "OROGLM"         : [False, False, AS_void,          None,        "LNHDYN .AND. LLT0"  ], &
& "GDW"            : [False, False, AS_1_nflevg,      None,        "LNHDYN"             ], &
& "GWHT"           : [False, False, AS_0_nflevg,      None,        None                 ], &
& "PHI"            : [False, False, AS_0_nflevg,      None,        None                 ], &
& "PRE"            : [False, False, AS_0_nflevg,      None,        None                 ], &
& "PHIF"           : [True,  True,  AS_1_nflevg,      None,        None                 ], &
& "PREF"           : [True,  True,  AS_1_nflevg,      None,        None                 ], &
& "WRL"            : [True,  False, AS_1_nflevg,      None,        None                 ], &
& "PREL"           : [False, False, AS_void,          None,        None                 ], &
& "PREM"           : [False, False, AS_void,          None,        None                 ], &
& "NHY"            : [False, False, AS_0_nflevg,      None,        None                 ], &
& "GWFT"           : [False, False, AS_1_nflevg,      None,        None                 ], &
& "KENE"           : [False, False, AS_1_nflevg,      None,        "LLT0"               ], &
& "NHX"            : [False, False, AS_1_nflevg,      None,        None                 ], &
& "PHIFL"          : [False, False, AS_1_nflevg,      None,        "LLT0"               ], &
& "PHIFM"          : [False, False, AS_1_nflevg,      None,        "LLT0"               ], &
& "RTL"            : [False, False, AS_1_nflevg,      None,        "LLT0"               ], &
& "RTM"            : [False, False, AS_1_nflevg,      None,        "LLT0"               ], &
& "RCP"            : [True,  True,  AS_4D,            "RCP",       None                 , "YLTRCP"     ], &
& "CTY"            : [True,  False, AS_4D,            "CTY",       "LLT0"               , "YLTCTY"     ], &
& "UVH"            : [False, False, AS_4D,            "HWIND",     "LLT0"               , "YLTHW"      ], &
& "XYB"            : [False, False, AS_4D,            "XYB",       None                 , "YLTXYB"     ], &
& "DBBC"           : [False, False, AS_void,          None,        "LNHDYN .AND. LLT0"  ], &
& "GWS"            : [False, False, AS_void,          None,        "LNHDYN .AND. LLT0"  ], &
& "GWFL"           : [False, False, AS_1_nflevg,      None,        "LNHDYN .AND. LLT0"  ], &
& "GWFM"           : [False, False, AS_1_nflevg,      None,        "LNHDYN .AND. LLT0"  ], &
& "GWT"            : [False, False, AS_1_nflevg,      None,        "LNHDYN"             ], &
& "NHPREF"         : [False, False, AS_1_nflevg,      None,        "LNHDYN"             ], &
& "NHPREH"         : [False, False, AS_0_nflevg,      None,        "LNHDYN"             ], &
& "QCHAL"          : [False, False, AS_1_nflevg,      None,        "LNHDYN .AND. LLT0"  ], &
& "QCHAM"          : [False, False, AS_1_nflevg,      None,        "LNHDYN .AND. LLT0"  ], &
& "RDPHI"          : [False, False, AS_1_nflevg,      None,        "LNHDYN .AND. LLT0"  ], &
& }

#:set vars_cpg_phy = { &                                                                                         
& "PRE"            : [False, False, AS_0_nflevg,      None,        "LLMF_PHYS"          ], &
& "PREF"           : [False, False, AS_1_nflevg,      None,        "LLMF_PHYS"          ], &
& "PREHYD"         : [False, False, AS_0_nflevg,      None,        "LLMF_PHYS"          ], &
& "PREHYDF"        : [False, False, AS_1_nflevg,      None,        "LLMF_PHYS"          ], &
& "WL"             : [False, False, AS_1_nflevg,      None,        "LLMF_PHYS"          ], &
& "WM"             : [False, False, AS_1_nflevg,      None,        "LLMF_PHYS"          ], &
& "W"              : [False, False, AS_1_nflevg,      None,        "LLMF_PHYS"          ], &
& "XYB"            : [False, False, AS_4D,            "XYB",       "LLMF_PHYS"          , "YLTXYB_PHY" ], &
& }

#! & "KOZO"           : [False, False, YDGEOMETRY%YRDIMV%NFLEVG,YDMODEL%YRML_PHY_G%YRDPHY%NVCLIS)     
#! & "DHCV"           : [False, False, AS_0_nflevg,YDMODEL%YRML_DIAG%YRMDDH%NDHCVSUN)   
#! & "GPAR"           : [False, False, YDMODEL%YRML_PHY_MF%YRPARAR%NGPAR+1)             

#:set vars_cpg_misc = { &
& "NEB"            : [False, False, AS_1_nflevg,      None,        None                 ], &
& "QLI"            : [False, False, AS_1_nflevg,      None,        None                 ], &
& "QICE"           : [False, False, AS_1_nflevg,      None,        None                 ], &
& "QRAIN"          : [False, False, AS_1_nflevg,      None,        None                 ], &
& "QSNOW"          : [False, False, AS_1_nflevg,      None,        None                 ], &
& "RH"             : [False, False, AS_1_nflevg,      None,        None                 ], &
& "QS"             : [False, False, AS_void,          None,        None                 ], &
& "QSOL"           : [False, False, AS_void,          None,        None                 ], &
& "DHSF"           : [False, False, AS_void,          None,        None                 ], &
& "CLCT"           : [False, False, AS_void,          None,        None                 ], &
& "LSM"            : [False, False, AS_void,          None,        None                 ], &
& "TSOL"           : [False, False, AS_void,          None,        None                 ], &
& "FTCNS"          : [False, False, AS_0_nflevg_6,    None,        None                 ], &
& }

#:set vars_cpg_dyn_xyb = { &
& "DELP"           : [False, False, AS_1_nflevg,                                        ], & 
& "RDELP"          : [False, False, AS_1_nflevg,                                        ], &
& "LNPR"           : [False, False, AS_1_nflevg,                                        ], &
& "ALPH"           : [False, False, AS_1_nflevg,                                        ], &
& "RTGR"           : [False, False, AS_1_nflevg,                                        ], &
& "RPRE"           : [False, False, AS_1_nflevg,                                        ], &
& "RPP"            : [False, False, AS_1_nflevg,                                        ], &
& }

#:set vars_cpg_dyn_hwind = { &
& "UH"             : [False, False, AS_0_nflevg,                                        ], &
& "VH"             : [False, False, AS_0_nflevg,                                        ], &
& "WWI"            : [False, False, AS_0_nflevg,                                        ], &
& }

#:set vars_cpg_dyn_rcp = { &
& "CP"             : [False, False, AS_1_nflevg,                                        ], &
& "R"              : [False, False, AS_1_nflevg,                                        ], &
& "KAP"            : [False, False, AS_1_nflevg,                                        ], &
& }

#:set vars_cpg_dyn_cty = { &
& "EVEL"           : [False, False, AS_0_nflevg,                                        ], &
& "VVEL"           : [False, False, AS_0_nflevg,                                        ], &
& "PSDIV"          : [False, False, AS_0_nflevg,                                        ], &
& "PSDVBC"         : [False, False, AS_0_nflevg,                                        ], &
& "DIVDP"          : [False, False, AS_0_nflevg,                                        ], &
& }

#:set vars_cpg_dyn_tnd = { &
& "TNDU"           : [False, False, AS_1_nflevg,                                        ], &
& "TNDV"           : [False, False, AS_1_nflevg,                                        ], &
& "TNDU_NOC"       : [False, False, AS_1_nflevg,                                        ], &
& "TNDV_NOC"       : [False, False, AS_1_nflevg,                                        ], &
& "TNDT"           : [False, False, AS_1_nflevg,                                        ], &
& "TNDPD"          : [False, False, AS_1_nflevg,                                        ], &
& "TNDVD"          : [False, False, AS_1_nflevg,                                        ], &
& "TNDGW"          : [False, False, AS_1_nflevg,                                        ], &
& }


MODULE CPG_TYPE_MOD

USE FIELD_MODULE
USE FIELD_REGISTRY_MOD
USE PARKIND1, ONLY : JPRB, JPIM

IMPLICIT NONE


#:def pcpg_dyn_4d_definition (name, vars)
TYPE CPG_${name}$_TYPE
  LOGICAL :: LOWNED = .FALSE.
  REAL (KIND=JPRB), POINTER :: ZDATA (:,:,:,:) => NULL ()
  REAL (KIND=JPRB), POINTER :: ZVIEW (:,:,:) => NULL ()

#:for var in vars
  #:set ndim = 1 + len (vars[var][NDIMS])
  REAL (KIND=JPRB), POINTER, CONTIGUOUS :: ${var}$ (${", ".join ([":"] * ndim)}$) => NULL ()
  TYPE (FIELD_${ndim+1}$D), POINTER :: F_${var}$ => NULL ()
#:endfor

CONTAINS
  PROCEDURE :: INIT => CPG_${name}$_TYPE_INIT
  PROCEDURE :: UPDATE_VIEW => CPG_${name}$_TYPE_UPDATE_VIEW
  PROCEDURE :: FINAL => CPG_${name}$_TYPE_FINAL
END TYPE 
#:enddef

$:pcpg_dyn_4d_definition ("XYB",   vars_cpg_dyn_xyb)

$:pcpg_dyn_4d_definition ("HWIND", vars_cpg_dyn_hwind)

$:pcpg_dyn_4d_definition ("RCP",   vars_cpg_dyn_rcp)

$:pcpg_dyn_4d_definition ("CTY",   vars_cpg_dyn_cty)

$:pcpg_dyn_4d_definition ("TND",   vars_cpg_dyn_tnd)

#:def pcpg_type_definition (name, vars)
TYPE CPG_${name}$_TYPE

#:for var in vars
  #:set elt = vars[var]
  #:if elt[NTYPE] is None
    #:set ndim = 1 + len (elt[NDIMS])
  REAL (KIND=JPRB), POINTER, CONTIGUOUS :: ${var}$ (${", ".join ([":"] * ndim)}$) => NULL ()
  TYPE (FIELD_${ndim+1}$D), POINTER :: F_${var}$ => NULL ()
  #:else
  TYPE (CPG_${elt[NTYPE]}$_TYPE) :: ${var}$
  #:endif
#:endfor

CONTAINS
  PROCEDURE :: INIT => CPG_${name}$_TYPE_INIT
  PROCEDURE :: UPDATE_VIEW => CPG_${name}$_TYPE_UPDATE_VIEW
  PROCEDURE :: FINAL => CPG_${name}$_TYPE_FINAL
END TYPE
#:enddef pcpg_type_definition

$:pcpg_type_definition ("DYN", vars_cpg_dyn)

$:pcpg_type_definition ("PHY", vars_cpg_phy)

$:pcpg_type_definition ("MISC", vars_cpg_misc)

REAL(KIND=JPRB), PRIVATE, SAVE, TARGET :: ZDUM1 (1), ZDUM2 (1, 1), ZDUM3 (1,1,1)

CONTAINS

#:def gdim (d)
  #:if d[0] == '0' 
    #:set s = "+1"
  #:elif d[0] == '1' 
    #:set s = ""
  #:else 
    #:set s = "-" + d[0] + "+1"
  #:endif
  #:set s = d[1] + s
$:s
#:enddef gdim

#:def temporary (var, dim, ind)
  #:set ndim = 1 + len (dim)
  #:if ndim == 1
${ind}$SELF%F_${var}$ => CREATE_TEMPORARY ("${var}$", GEOM=REGISTRY%GEOM, PERSISTENT=PERSISTENT)
  #:elif ndim == 2
    #:set s2 = gdim (dim[0])
${ind}$SELF%F_${var}$ => CREATE_TEMPORARY ("${var}$", GEOM=REGISTRY%GEOM, NLEV=${s2}$, PERSISTENT=PERSISTENT)
  #:elif ndim == 3
    #:set s2 = gdim (dim[0])
    #:set s3 = gdim (dim[1])
${ind}$SELF%F_${var}$ => CREATE_TEMPORARY ("${var}$", GEOM=REGISTRY%GEOM, NLEV=${s2}$, NDIM=${s3}$, PERSISTENT=PERSISTENT)
  #:endif
#:enddef temporary

#:def argn (a)
  #:if a[0:1] != "P"
    #:set a = "P" + a
  #:endif
$:a
#:enddef argn

#:def pdim (d)
  #:if all (map (lambda x: x[0] == '1', d))
    #:set s = ""
  #:else
    #:set s = "(1:," + ", ".join (map (lambda x: x[0] + ":", d)) + ")"
  #:endif
$:s
#:enddef pdim


#:def pcpg_dyn_4d_methods (name, vars)
SUBROUTINE CPG_${name}$_TYPE_INIT (SELF, REGISTRY, NLEV, YDT${name}$, PERSISTENT, P${name}$)

USE INTDYN_MOD, ONLY : T${name}$

CLASS (CPG_${name}$_TYPE)                          :: SELF
TYPE (FIELD_REGISTRY),              INTENT (INOUT) :: REGISTRY
INTEGER (KIND=JPIM),                INTENT (IN)    :: NLEV
TYPE (T${name}$),                   INTENT (IN)    :: YDT${name}$
LOGICAL, OPTIONAL,                  INTENT (IN)    :: PERSISTENT
REAL (KIND=JPRB), OPTIONAL, TARGET, INTENT (IN)    :: P${name}$ (:, :, :, :)

IF (PRESENT (P${name}$)) THEN
  SELF%ZDATA => P${name}$
  SELF%LOWNED = .FALSE.
ELSE
#:set var = list (vars.keys ())[0]
#:set s2 = gdim (vars[var][NDIMS][0])
  ALLOCATE (SELF%ZDATA (REGISTRY%NPROMA, ${s2}$, YDT${name}$%NDIM, REGISTRY%NBLOCKS))
  SELF%LOWNED = .TRUE.
ENDIF

#:for var in vars
 IF (YDT${name}$%M_${var}$ > 0) THEN
   SELF%F_${var}$ => CREATE_FIELD_WRAP ('${var}$', SELF%ZDATA (:, :, YDT${name}$%M_${var}$, :))
 ENDIF
#:endfor

#! IF (PRESENT (P${name}$)) THEN
#! 
#! #:for var in vars
#!  IF (YDT${name}$%M_${var}$ > 0) THEN
#!    SELF%F_${var}$ => CREATE_FIELD_WRAP ('${var}$', P${name}$ (:, :, YDT${name}$%M_${var}$, :))
#!  ENDIF
#! #:endfor
#! 
#! ELSE
#! 
#! #:for var in vars
#!  IF (YDT${name}$%M_${var}$ > 0) THEN
#! $:temporary (var, vars[var][NDIMS], "    ")
#!  ENDIF
#! #:endfor
#!
#! ENDIF

END SUBROUTINE

SUBROUTINE CPG_${name}$_TYPE_UPDATE_VIEW (SELF, BLOCK_INDEX)

CLASS (CPG_${name}$_TYPE)         :: SELF
INTEGER(KIND=JPIM), INTENT (IN)   :: BLOCK_INDEX

SELF%ZVIEW => SELF%ZDATA (:,:,:,BLOCK_INDEX)

#:for var in vars
  #:set ss = pdim (vars[var][NDIMS])
  #:set ndim = 1 + len (vars[var][NDIMS])
IF (ASSOCIATED (SELF%F_${var}$)) THEN  
  SELF%${var}$ ${ss}$ => SELF%F_${var}$%GET_VIEW (BLOCK_INDEX)
ELSE
  SELF%${var}$ ${ss}$ => ZDUM${ndim}$
ENDIF
#:endfor

END SUBROUTINE

SUBROUTINE CPG_${name}$_TYPE_FINAL (SELF)
CLASS (CPG_${name}$_TYPE)          :: SELF

IF (SELF%LOWNED) DEALLOCATE (SELF%ZDATA)
SELF%ZDATA => NULL ()

#:for var in vars
IF (ASSOCIATED (SELF%F_${var}$)) CALL DELETE_TEMPORARY (SELF%F_${var}$) 
#:endfor

END SUBROUTINE 
#:enddef


$:pcpg_dyn_4d_methods ("XYB",   vars_cpg_dyn_xyb)

$:pcpg_dyn_4d_methods ("HWIND", vars_cpg_dyn_hwind)

$:pcpg_dyn_4d_methods ("RCP",   vars_cpg_dyn_rcp)

$:pcpg_dyn_4d_methods ("CTY",   vars_cpg_dyn_cty)

$:pcpg_dyn_4d_methods ("TND",   vars_cpg_dyn_tnd)

#:def pcpg_type_methods (name, vars)

#:set use_type = False
#:set use_llt0 = False
#:for var in vars
  #:if vars[var][NTYPE]
    #:set use_type = True
  #:endif
  #:if vars[var][NCOND]
    #:if "LLT0" in vars[var][NCOND]
      #:set use_llt0 = True
    #:endif
  #:endif
#:endfor
#:set use_llt0 = use_llt0 or use_type

SUBROUTINE CPG_${name}$_TYPE_INIT (SELF &
#:if use_llt0
                                & , KT  &
#:endif
                                & , REGISTRY, NLEV, PERSISTENT, LDMF_PHYS &
#:for var in vars
  #:if vars[var][ISARG]
                           &, ${argn (var)}$ &
  #:endif
#:endfor
                           &)

#:if use_type
USE INTDYN_MOD, ONLY : YYTCTY0, YYTRCP0, YYTHW0, YYTXYB0, YYTXYB0_PHY
USE INTDYN_MOD, ONLY :          YYTRCP9, YYTHW9, YYTXYB9, YYTXYB9_PHY
USE INTDYN_MOD, ONLY : TRCP, TCTY, THWIND, TXYB
#:endif
USE YOMCT0    , ONLY : LNHDYN

CLASS (CPG_${name}$_TYPE)                    :: SELF
#:if use_llt0
INTEGER(KIND=JPIM),           INTENT (IN)    :: KT
#:endif
TYPE (FIELD_REGISTRY),        INTENT (INOUT) :: REGISTRY
INTEGER (KIND=JPIM),          INTENT (IN)    :: NLEV
LOGICAL, OPTIONAL,            INTENT (IN)    :: PERSISTENT
LOGICAL, OPTIONAL,            INTENT (IN)    :: LDMF_PHYS
#:for var in vars
  #:if vars[var][ISARG]
    #:set ndim = 1 + len (vars[var][NDIMS]) + 1
REAL(KIND=JPRB),       INTENT (IN), OPTIONAL, TARGET  :: ${argn (var)}$(${", ".join ([":"] * ndim)}$)
  #:endif
#:endfor

#:if use_llt0
LOGICAL :: LLT0
#:endif
LOGICAL :: LLMF_PHYS

#:if use_type
TYPE (TRCP)   , POINTER :: YLTRCP     
TYPE (TCTY)   , POINTER :: YLTCTY     
TYPE (THWIND) , POINTER :: YLTHW     
TYPE (TXYB)   , POINTER :: YLTXYB     
TYPE (TXYB)   , POINTER :: YLTXYB_PHY

TYPE (TCTY),   TARGET :: YLTCTY0 
TYPE (THWIND), TARGET :: YLTHW0, YLTHW9 
TYPE (TRCP),   TARGET :: YLTRCP0, YLTRCP9 
TYPE (TXYB),   TARGET :: YLTXYB0, YLTXYB0_PHY, YLTXYB9, YLTXYB9_PHY

YLTCTY0     = YYTCTY0 
YLTHW0      = YYTHW0 
YLTHW9      = YYTHW9 
YLTRCP0     = YYTRCP0 
YLTRCP9     = YYTRCP9 
YLTXYB0     = YYTXYB0 
YLTXYB0_PHY = YYTXYB0_PHY 
YLTXYB9     = YYTXYB9 
YLTXYB9_PHY = YYTXYB9_PHY
#:endif

#:if use_llt0
LLT0 = KT == 0
#:endif

#:if use_type
YLTRCP     => NULL ()
YLTCTY     => NULL ()
YLTHW      => NULL ()
YLTXYB     => NULL ()
YLTXYB_PHY => NULL ()

IF (KT == 0) THEN
  YLTRCP     => YLTRCP0
  YLTCTY     => YLTCTY0
  YLTHW      => YLTHW0
  YLTXYB     => YLTXYB0
  YLTXYB_PHY => YLTXYB0_PHY
ELSEIF (KT == 9) THEN
  YLTRCP     => YLTRCP9
  YLTCTY     => NULL ()
  YLTHW      => YLTHW9
  YLTXYB     => YLTXYB9
  YLTXYB_PHY => YLTXYB9_PHY
ENDIF
#:endif

LLMF_PHYS = .FALSE.
IF (PRESENT (LDMF_PHYS)) THEN
  LLMF_PHYS = LDMF_PHYS
ENDIF

#:for var in vars
  #:set elt = vars[var]
  #:if not elt[NCOND] is None
    #:set ind = "  "
IF (${elt[NCOND]}$) THEN
  #:else
    #:set ind = ""
  #:endif
  #:if elt[NTYPE] is None
    #:if elt[ISARG]
${ind}$IF (PRESENT (${argn (var)}$)) THEN
${ind}$  SELF%F_${var}$ => CREATE_FIELD_WRAP ('${var}$', ${argn (var)}$)
      #:if elt[ELARG]
${ind}$ELSE
$:temporary (var, elt[NDIMS], ind + "  ")
      #:endif
${ind}$ENDIF
    #:else
$:temporary (var, elt[NDIMS], ind + "")
    #:endif
  #:else
    #:set defs = elt[NDEFS]
    #:if elt[ISARG]
${ind}$CALL SELF%${var}$%INIT (REGISTRY, NLEV, ${defs}$, PERSISTENT, ${argn (var)}$)
    #:else
${ind}$CALL SELF%${var}$%INIT (REGISTRY, NLEV, ${defs}$, PERSISTENT)
    #:endif
  #:endif
  #:if not elt[NCOND] is None
ENDIF
  #:endif

#:endfor

END SUBROUTINE

SUBROUTINE CPG_${name}$_TYPE_UPDATE_VIEW (SELF, BLOCK_INDEX)

CLASS (CPG_${name}$_TYPE)         :: SELF
INTEGER(KIND=JPIM), INTENT (IN)   :: BLOCK_INDEX

#:for var in vars
  #:set elt = vars[var]
  #:if elt[NTYPE] is None
    #:set ss = pdim (elt[NDIMS])
    #:set ndim = 1 + len (elt[NDIMS])
IF (ASSOCIATED (SELF%F_${var}$)) THEN
  SELF%${var}$ ${ss}$ => SELF%F_${var}$%GET_VIEW (BLOCK_INDEX)
ELSE
  SELF%${var}$ ${ss}$ => ZDUM${ndim}$
ENDIF
  #:else
CALL SELF%${var}$%UPDATE_VIEW (BLOCK_INDEX)
  #:endif
#:endfor

END SUBROUTINE

SUBROUTINE CPG_${name}$_TYPE_FINAL (SELF)
CLASS (CPG_${name}$_TYPE)         :: SELF

#:for var in vars
  #:set elt = vars[var]
  #:if elt[NTYPE] is None
IF (ASSOCIATED (SELF%F_${var}$)) CALL DELETE_TEMPORARY (SELF%F_${var}$) 
  #:else
CALL SELF%${var}$%FINAL ()
  #:endif
#:endfor

END SUBROUTINE 
#:enddef pcpg_type_methods

$:pcpg_type_methods ("DYN" , vars_cpg_dyn )

$:pcpg_type_methods ("PHY" , vars_cpg_phy )

$:pcpg_type_methods ("MISC", vars_cpg_misc)

END MODULE CPG_TYPE_MOD

