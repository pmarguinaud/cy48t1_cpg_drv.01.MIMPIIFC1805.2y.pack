#:include "field_definition.fypp"

#:set dumsize = '1'

MODULE FIELD_HELPER_MODULE

USE FIELD_MODULE
USE YOMHOOK

IMPLICIT NONE

INTERFACE CREATE_TEMPORARY_LU
#:for d in [2, 3, 4, 5]
  MODULE PROCEDURE CREATE_TEMPORARY_${d}$D_LU
#:endfor
#:for d in [2, 3]
  MODULE PROCEDURE CREATE_TEMPORARY_INT${d}$D_LU
#:endfor
#:for d in [2]
  MODULE PROCEDURE CREATE_TEMPORARY_LOG${d}$D_LU
#:endfor
END INTERFACE CREATE_TEMPORARY_LU

INTERFACE GET_DEVICE_DATA_RDONLY
#:for dtype, suffix, rank, default in field_descriptors
#:set field_type_name = 'FIELD_%s%sD' % (suffix, rank)
  MODULE PROCEDURE :: ${field_type_name}$_GET_DEVICE_DATA_RDONLY
#:endfor
END INTERFACE GET_DEVICE_DATA_RDONLY

INTERFACE GET_DEVICE_DATA_RDWR
#:for dtype, suffix, rank, default in field_descriptors
#:set field_type_name = 'FIELD_%s%sD' % (suffix, rank)
  MODULE PROCEDURE :: ${field_type_name}$_GET_DEVICE_DATA_RDWR
#:endfor
END INTERFACE GET_DEVICE_DATA_RDWR

INTERFACE GET_HOST_DATA_RDONLY
#:for dtype, suffix, rank, default in field_descriptors
#:set field_type_name = 'FIELD_%s%sD' % (suffix, rank)
  MODULE PROCEDURE :: ${field_type_name}$_GET_HOST_DATA_RDONLY
#:endfor
END INTERFACE GET_HOST_DATA_RDONLY

INTERFACE GET_HOST_DATA_RDWR
#:for dtype, suffix, rank, default in field_descriptors
#:set field_type_name = 'FIELD_%s%sD' % (suffix, rank)
  MODULE PROCEDURE :: ${field_type_name}$_GET_HOST_DATA_RDWR
#:endfor
END INTERFACE GET_HOST_DATA_RDWR

INTEGER (KIND=JPIM), PARAMETER, PRIVATE :: NH2D = 1, ND2H = 2, NRD = B'00000001', NWR = B'00000010'

CONTAINS

#:for dtype, suffix, rank, default in field_descriptors
#:set field_type_name = 'FIELD_%s%sD' % (suffix, rank)

  INTEGER (KIND=JPIM) FUNCTION ${field_type_name}$_GET_LAST_CONTIGUOUS_DIMENSION (PTR) RESULT (JDIM)
  ${dtype}$, POINTER :: PTR (${shapes[rank]}$)
  INTEGER*8 :: ISTRIDE (${rank}$)
  INTEGER (KIND=JPIM) :: J

  ISTRIDE (1) = KIND (PTR)
  DO J = 2, ${rank}$
    ISTRIDE (J) = ISTRIDE (J-1) * SIZE (PTR, J-1) 
  ENDDO

  JDIM = 0
#:for d in range (1, rank+1)
  #:set ind0 = ['1'] * rank
  #:set ind1 = ['1'] * (d - 1) + ['2'] + ['1'] * (rank - d)
  IF (LOC (PTR (${', '.join (ind1)}$)) - LOC (PTR (${', '.join (ind0)}$)) /= ISTRIDE (${d}$)) THEN
    RETURN
  ENDIF

  JDIM = ${d}$

#:endfor
  END FUNCTION ${field_type_name}$_GET_LAST_CONTIGUOUS_DIMENSION

  SUBROUTINE ${field_type_name}$_COPY (HST, DEV, KDIR)
  ${dtype}$, POINTER :: HST (${shapes[rank]}$), DEV (${shapes[rank]}$)
  INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
  INTEGER (KIND=JPIM) :: JDIM

  JDIM = ${field_type_name}$_GET_LAST_CONTIGUOUS_DIMENSION (HST)

  SELECT CASE (JDIM)
#:for d in range (rank + 1)
    CASE (${d}$)
      CALL COPY_DIM${d}$_CONTIGUOUS (HST, DEV, KDIR)
#:endfor
  END SELECT

  CONTAINS

#:for d in range (0, rank+1)
    SUBROUTINE COPY_DIM${d}$_CONTIGUOUS (HST, DEV, KDIR)
    USE OPENACC
    ${dtype}$, POINTER :: HST (${shapes[rank]}$), DEV (${shapes[rank]}$)
    INTEGER (KIND=JPIM), INTENT (IN) :: KDIR
    INTEGER (KIND=JPIM) :: ISIZE
    INTEGER :: ${', '.join (['J'] + list (map (lambda i: 'J' + str (i+1), range (d, rank))))}$

  #:for e in range (rank, d, -1)
    ${'  ' * (rank - e)}$DO J${e}$ = LBOUND (HST, ${e}$), UBOUND (HST, ${e}$)
  #:endfor
  #:set ar = ', '.join ([':'] * d  + list (map (lambda i: 'J' + str (i+1), range (d, rank))))
  #:set indent = '  ' * (rank - e)
    #:if d == 0
    ${indent}$  ISIZE = KIND (HST)
    #:else
    ${indent}$  ISIZE = KIND (HST) * SIZE (HST (${ar}$))
    #:endif
    ${indent}$  IF (KDIR == NH2D) THEN
    ${indent}$    !$acc host_data use_device (DEV)
#ifdef _OPENACC
    ${indent}$    CALL ACC_MEMCPY_TO_DEVICE (DEV (${ar}$), HST (${ar}$), ISIZE)
#endif
    ${indent}$    !$acc end host_data
    ${indent}$  ELSEIF (KDIR == ND2H) THEN
    ${indent}$    !$acc host_data use_device (DEV)
#ifdef _OPENACC
    ${indent}$    CALL ACC_MEMCPY_FROM_DEVICE (HST (${ar}$), DEV (${ar}$), ISIZE)
#endif
    ${indent}$    !$acc end host_data
    ${indent}$  ENDIF
  #:for e in range (d, rank)
    ${'  ' * (rank - e - 1)}$ENDDO
  #:endfor
    END SUBROUTINE

#:endfor
  END SUBROUTINE ${field_type_name}$_COPY

  FUNCTION ${field_type_name}$_GET_HOST_DATA_ (SELF, MODE) RESULT (PTR)
    TYPE(${field_type_name}$), POINTER, INTENT (IN) :: SELF
    INTEGER (KIND=JPIM),                INTENT (IN) :: MODE
    ${dtype}$, TARGET, SAVE :: ZDUM (${ ', '.join ([dumsize] * (rank-1) + ['1']) }$)
    ${dtype}$, POINTER :: PTR(${shapes[rank]}$)

    IF (ASSOCIATED (SELF)) THEN
      IF (IAND (SELF%ISTATUS, NHSTFRESH) == 0) THEN
        CALL ${field_type_name}$_COPY (SELF%PTR, SELF%DEVPTR, ND2H)
        SELF%ISTATUS = IOR (SELF%ISTATUS, NHSTFRESH)
      ENDIF
      PTR (${lbptr (rank)}$) => SELF%PTR (${','.join(':' for _ in range(rank))}$)
      IF (IAND (MODE, NWR) /= 0) THEN
        SELF%ISTATUS = IAND (SELF%ISTATUS, NOT (NDEVFRESH))
      ENDIF
    ELSE
      PTR => ZDUM
    ENDIF

  END FUNCTION ${field_type_name}$_GET_HOST_DATA_

  FUNCTION ${field_type_name}$_GET_HOST_DATA_RDONLY (SELF) RESULT (PTR)
    TYPE(${field_type_name}$), POINTER, INTENT (IN) :: SELF
    ${dtype}$, POINTER :: PTR(${shapes[rank]}$)

    PTR => ${field_type_name}$_GET_HOST_DATA_ (SELF, NRD)

  END FUNCTION ${field_type_name}$_GET_HOST_DATA_RDONLY

  FUNCTION ${field_type_name}$_GET_HOST_DATA_RDWR (SELF) RESULT (PTR)
    TYPE(${field_type_name}$), POINTER, INTENT (IN) :: SELF
    ${dtype}$, POINTER :: PTR(${shapes[rank]}$)

    PTR => ${field_type_name}$_GET_HOST_DATA_ (SELF, IOR (NRD, NWR))

  END FUNCTION ${field_type_name}$_GET_HOST_DATA_RDWR

  FUNCTION ${field_type_name}$_GET_DEVICE_DATA_ (SELF, MODE) RESULT(PTR)
    TYPE(${field_type_name}$), POINTER, INTENT (IN) :: SELF
    INTEGER (KIND=JPIM),                INTENT (IN) :: MODE
    ${dtype}$, TARGET, SAVE :: ZDUM (${ ', '.join ([dumsize] * (rank-1) + ['1']) }$)
    ${dtype}$, POINTER :: PTR(${shapes[rank]}$)

    IF (ASSOCIATED (SELF)) THEN
      IF (IAND (SELF%ISTATUS, NDEVFRESH) == 0) THEN
        IF (.NOT. ASSOCIATED (SELF%DEVPTR)) THEN
          ALLOCATE (SELF%DEVPTR, MOLD=SELF%PTR)
          !$acc enter data create (SELF%DEVPTR)
        ENDIF
        CALL ${field_type_name}$_COPY (SELF%PTR, SELF%DEVPTR, NH2D)
        SELF%ISTATUS = IOR (SELF%ISTATUS, NDEVFRESH)
      ENDIF
      PTR (${lbptr (rank)}$) => SELF%DEVPTR (${','.join(':' for _ in range(rank))}$)
      IF (IAND (MODE, NWR) /= 0) THEN
        SELF%ISTATUS = IAND (SELF%ISTATUS, NOT (NHSTFRESH))
      ENDIF
    ELSE
      PTR => ZDUM
    ENDIF

  END FUNCTION ${field_type_name}$_GET_DEVICE_DATA_

  FUNCTION ${field_type_name}$_GET_DEVICE_DATA_RDONLY (SELF) RESULT (PTR)
    TYPE(${field_type_name}$), POINTER, INTENT (IN) :: SELF
    ${dtype}$, POINTER :: PTR(${shapes[rank]}$)

    PTR => ${field_type_name}$_GET_DEVICE_DATA_ (SELF, NRD)

  END FUNCTION ${field_type_name}$_GET_DEVICE_DATA_RDONLY

  FUNCTION ${field_type_name}$_GET_DEVICE_DATA_RDWR (SELF) RESULT (PTR)
    TYPE(${field_type_name}$), POINTER, INTENT (IN) :: SELF
    ${dtype}$, POINTER :: PTR(${shapes[rank]}$)

    PTR => ${field_type_name}$_GET_DEVICE_DATA_ (SELF, IOR (NRD, NWR))

  END FUNCTION ${field_type_name}$_GET_DEVICE_DATA_RDWR

#:endfor

#:def create_temporary (dims, type)
#:for d in dims
  SUBROUTINE CREATE_TEMPORARY_${type}$${d}$D_LU (FIELD_PTR, UBOUNDS, LBOUNDS, PERSISTENT) 

    TYPE(FIELD_${type}$${d}$D), POINTER :: FIELD_PTR
    INTEGER(KIND=JPIM), INTENT(IN) :: UBOUNDS (${d}$)
    INTEGER(KIND=JPIM), OPTIONAL, INTENT(IN) :: LBOUNDS (${d}$)
    LOGICAL, OPTIONAL, INTENT(IN) :: PERSISTENT
    INTEGER(KIND=JPIM) :: NBLOCKS
    INTEGER(KIND=JPIM) :: ISIZE (${d}$)

    ISIZE = UBOUNDS
    IF (PRESENT (LBOUNDS)) ISIZE = ISIZE - LBOUNDS + 1

    ALLOCATE(FIELD_PTR)
    NBLOCKS = UBOUNDS (${d}$)
    CALL ALLOCATE_FIELD (FIELD_PTR, SHAPE=ISIZE(1:${d}$-1), NBLOCKS=NBLOCKS, PERSISTENT=PERSISTENT, LBOUNDS=LBOUNDS)

    FIELD_PTR%ISTATUS = NHSTFRESH
    FIELD_PTR%PTR => FIELD_PTR%DATA

  END SUBROUTINE CREATE_TEMPORARY_${type}$${d}$D_LU

#:endfor
#:enddef

$:create_temporary ([2, 3, 4, 5], '')
$:create_temporary ([2, 3      ], 'INT')
$:create_temporary ([2         ], 'LOG')

END MODULE FIELD_HELPER_MODULE
