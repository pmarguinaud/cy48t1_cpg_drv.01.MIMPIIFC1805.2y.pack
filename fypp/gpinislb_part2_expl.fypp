#:set config_file = os.path.dirname(_THIS_FILE_) + '/field_config.yaml'
#:set config = field_config.VariableConfiguration(config_file)
#:set gfl = config.groups['GFL']

SUBROUTINE GPINISLB_PART2_EXPL (LDSLAG, LDTWOTL, YDDYN, KST, KEN, PTE, YDVARS)

USE PARKIND1, ONLY : JPIM, JPRB
USE YOMHOOK,  ONLY : LHOOK, DR_HOOK

USE YOMDYN, ONLY : TDYN
USE FIELD_VARIABLES_MOD, ONLY : FIELD_VARIABLES

IMPLICIT NONE

LOGICAL                ,INTENT(IN)    :: LDSLAG
LOGICAL                ,INTENT(IN)    :: LDTWOTL
TYPE(TDYN)             ,INTENT(IN)    :: YDDYN
INTEGER(KIND=JPIM)     ,INTENT(IN)    :: KST
INTEGER(KIND=JPIM)     ,INTENT(IN)    :: KEN
REAL(KIND=JPRB)        ,INTENT(IN)    :: PTE
TYPE(FIELD_VARIABLES)  ,INTENT(INOUT) :: YDVARS

INTEGER (KIND=JPIM) :: IV

REAL(KIND=JPRB) :: ZHOOK_HANDLE

IF (LHOOK) CALL DR_HOOK('GPINISLB_PART2_EXPL',0,ZHOOK_HANDLE)

IF (LDSLAG) THEN
  IF (LDTWOTL) THEN
#:for v in gfl.variables
#:if v.array == 1
    DO IV = 1, SIZE (YDVARS%${v.name}$)
      CALL SLG_2TL (YDVARS%${v.name}$ (IV))
    ENDDO
#:else
    CALL SLG_2TL (YDVARS%${v.name}$)
#:endif
#:endfor
  ELSE
#:for v in gfl.variables
#:if v.array == 1
    DO IV = 1, SIZE (YDVARS%${v.name}$)
      CALL SLG_3TL (YDVARS%${v.name}$ (IV))
    ENDDO
#:else
    CALL SLG_3TL (YDVARS%${v.name}$)
#:endif
#:endfor
  ENDIF
ELSE 
  IF (YDDYN%NCURRENT_ITER == 0) THEN
#:for v in gfl.variables
#:if v.array == 1
    DO IV = 1, SIZE (YDVARS%${v.name}$)
      CALL EUL_IT0 (YDVARS%${v.name}$ (IV))
    ENDDO
#:else
    CALL EUL_IT0 (YDVARS%${v.name}$)
#:endif
#:endfor
  ELSE
#:for v in gfl.variables
#:if v.array == 1
    DO IV = 1, SIZE (YDVARS%${v.name}$)
      CALL EUL_ITX (YDVARS%${v.name}$ (IV))
    ENDDO
#:else
    CALL EUL_ITX (YDVARS%${v.name}$)
#:endif
#:endfor
  ENDIF
ENDIF

IF (LHOOK) CALL DR_HOOK('GPINISLB_PART2_EXPL',1,ZHOOK_HANDLE)

CONTAINS

SUBROUTINE EUL_IT0 (YDVAR)
USE VARIABLE_MODULE, ONLY : VARIABLE_3D
TYPE (VARIABLE_3D) :: YDVAR
IF(YDVAR%LT1) THEN
  CALL TPTE (YDVAR%T1, YDVAR%T9)
ENDIF
END SUBROUTINE

SUBROUTINE EUL_ITX (YDVAR)
USE VARIABLE_MODULE, ONLY : VARIABLE_3D
TYPE (VARIABLE_3D) :: YDVAR
IF(YDVAR%LT1) THEN
  CALL ZERO (YDVAR%T1)
ENDIF
END SUBROUTINE

SUBROUTINE SLG_2TL (YDVAR)
USE VARIABLE_MODULE, ONLY : VARIABLE_3D
TYPE (VARIABLE_3D) :: YDVAR
IF(YDVAR%LADV) THEN
  CALL ZERO (YDVAR%T1)
ELSEIF(YDVAR%LT1) THEN
  CALL TPTE (YDVAR%T1, YDVAR%T0)
ENDIF
END SUBROUTINE

SUBROUTINE SLG_3TL (YDVAR)
USE VARIABLE_MODULE, ONLY : VARIABLE_3D
TYPE (VARIABLE_3D) :: YDVAR
IF(YDVAR%LADV) THEN
  CALL ZERO (YDVAR%T1)
ELSEIF(YDVAR%LT1) THEN
  CALL TPTE (YDVAR%T1, YDVAR%T9)
ENDIF
END SUBROUTINE

SUBROUTINE ZERO (P1)
REAL (KIND=JPRB), INTENT (OUT) :: P1 (:,:)
P1 (KST:KEN,:) = 0._JPRB
END SUBROUTINE

SUBROUTINE TPTE (P1, PX)
REAL (KIND=JPRB), INTENT (OUT) :: P1 (:,:)
REAL (KIND=JPRB), INTENT (IN)  :: PX (:,:)
P1 (KST:KEN,:) = PX (KST:KEN,:) * PTE
END SUBROUTINE

END SUBROUTINE
