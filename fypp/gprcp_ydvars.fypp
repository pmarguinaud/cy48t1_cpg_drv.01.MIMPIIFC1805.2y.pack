#:set config_file = os.path.dirname(_THIS_FILE_) + '/field_config.yaml'
#:set config = field_config.VariableConfiguration(config_file)
#:set gfl = config.groups['GFL']

SUBROUTINE GPRCP_YDVARS (KPROMA,KST,KPROF,KFLEV,PCP,PR,PKAP,YDVARS,PGFL,KGFLTYP)

!**** *GPRCP_YDVARS* - Computes Cp, R and R/Cp from Q

!     Purpose.
!     --------
!        Computes Cp, R and R/Cp from Q

!**   Interface.
!     ----------
!        *CALL* *GPRCP_YDVARS(...)

!        Explicit arguments :
!        --------------------

!        INPUT:
!          KPROMA               - dimensioning.
!          KSTART               - start of work.
!          KPROF                - depth of work.
!          KFLEV                - number of layers.

!        OUTPUT:
!          PCP(KPROMA,KFLEV)    - CP
!          PR(KPROMA,KFLEV)     - R
!          PKAP(KPROMA,KFLEV)   - KAPPA

!        Implicit arguments :  Physical constants from YOMCST
!        --------------------

!     Method.
!     -------
!        See documentation

!     Externals.  None.
!     ----------

!     Reference.
!     ----------
!        ECMWF Research Department documentation of the IFS

!     Author.
!     -------
!      Mats Hamrud and Philippe Courtier  *ECMWF*
!      Original : 88-02-04

!     Modifications.
!      M.Hamrud      01-Oct-2003 CY28 Cleaning
!      Y.Seity  04-02-13 (Rain, Snow and Graupel)
!      M.Hamrud  15-Jan-2006  Revised GPRCP
!      K. Yessad (Jan 2011): more compact rewriting.
!      R. El Khatib 28-Aug-2014 Optimizations :
!       - compute R or CP only if required
!       - loop collapsing whenever possible, through pure array syntax
!      A. Geer      01-Oct-2015    For independence of observation operator in OOPS, 
!                                  allow calls without YGFL initialised. Removal
!                                  of all YGFL references will have to wait.
!      H Petithomme (Dec 2020): general rewrite for optimization
!     ------------------------------------------------------------------

USE PARKIND1,ONLY: JPIM,JPRB
USE YOMHOOK,ONLY: LHOOK,DR_HOOK
USE YOMCST,ONLY: RD,RV,RCPD,RCPV,RCW,RCS
USE YOM_YGFL,ONLY: TYPE_GFLD,TYPE_GFL_COMP,YGFL
USE FIELD_VARIABLES_MOD,ONLY : FIELD_VARIABLES

USE YOMCT3   , ONLY : NSTEP

IMPLICIT NONE

INTEGER(KIND=JPIM),INTENT(IN) :: KPROMA,KFLEV,KST,KPROF
INTEGER(KIND=JPIM),OPTIONAL,INTENT(IN) :: KGFLTYP
TYPE(FIELD_VARIABLES),INTENT(INOUT) :: YDVARS
REAL(KIND=JPRB),INTENT(IN) :: PGFL(KPROMA,KFLEV,YGFL%NDIM)
REAL(KIND=JPRB),OPTIONAL,TARGET,INTENT(OUT) :: PCP(KPROMA,KFLEV)
REAL(KIND=JPRB),OPTIONAL,TARGET,INTENT(OUT) :: PR(KPROMA,KFLEV)
REAL(KIND=JPRB),OPTIONAL,INTENT(OUT) :: PKAP(KPROMA,KFLEV)

#include "abor1.intfb.h"

REAL(KIND=JPRB),CONTIGUOUS,POINTER :: ZR(:,:)
REAL(KIND=JPRB),CONTIGUOUS,POINTER :: ZCP(:,:)

REAL(KIND=JPRB),TARGET :: ZCP0(KPROMA,KFLEV),ZR0(KPROMA,KFLEV)
REAL(KIND=JPRB) :: ZCP1(KPROMA,KFLEV),ZR1(KPROMA,KFLEV)
INTEGER(KIND=JPIM) :: IGFLTYP,JL,JP,JGFL,I,NACT,IPT(YGFL%NUMFLDS),JLON,JLEV
REAL(KIND=JPRB) :: YR(YGFL%NUMFLDS),YCP(YGFL%NUMFLDS)
LOGICAL :: LLR, LLCP
REAL(KIND=JPRB) :: ZHOOK

IF (LHOOK) CALL DR_HOOK("GPRCP_YDVARS",0,ZHOOK)

IF (PRESENT(PR)) THEN
  ZR => PR(:,:)
ELSEIF (PRESENT(PKAP)) THEN
  ZR => ZR0(:,:)
ENDIF

IF (PRESENT(PCP)) THEN
  ZCP => PCP(:,:)
ELSEIF (PRESENT(PKAP)) THEN
  ZCP => ZCP0(:,:)
ELSE
  ZCP => NULL()
ENDIF

ZCP = 0._JPRB
ZR = 0._JPRB

IGFLTYP = 0
IF (PRESENT (KGFLTYP)) IGFLTYP = KGFLTYP 


ZR = 0._JPRB
ZCP = 0._JPRB

SELECT CASE (IGFLTYP)
#:for t in ['0', '1', '9']
  CASE (${t}$)
#:for v in gfl.variables
#:if v.array == 1
#:else
  IF (YDVARS%${v.name}$%LTHERMACT) THEN
    DO JLEV = 1, KFLEV
      DO JLON = KST, KPROF
        ZR (JLON,JLEV) = ZR (JLON,JLEV) + (YDVARS%${v.name}$%R - RD) * YDVARS%${v.name}$%T${t}$ (JLON, JLEV)
        ZCP (JLON,JLEV) = ZCP (JLON,JLEV) + (YDVARS%${v.name}$%RCP - RCPD) * YDVARS%${v.name}$%T${t}$ (JLON, JLEV)
      ENDDO
    ENDDO
  ENDIF
#:endif
#:endfor
#:endfor
  CASE DEFAULT
    CALL ABOR1 ('UNEXPECTED IGFLTYP')
END SELECT 

DO JLEV = 1, KFLEV
  DO JLON = KST, KPROF
    ZR (JLON,JLEV) = RD + ZR (JLON,JLEV)
    ZCP (JLON,JLEV) = RCPD + ZCP (JLON,JLEV)
  ENDDO
ENDDO

!  NACT = 0
!  IF (IGFLTYP == 0) THEN
!    DO JGFL=1,YGFL%NUMFLDS
!      IF (.NOT.YGFL%YCOMP(JGFL)%LTHERMACT) CYCLE
!  
!      NACT = NACT+1
!      IPT(NACT) = YGFL%YCOMP(JGFL)%MP
!      YR(NACT) = YGFL%YCOMP(JGFL)%R
!      YCP(NACT) = YGFL%YCOMP(JGFL)%RCP
!  
!  IF (NSTEP == 0) PRINT *, JGFL, YGFL%YCOMP(JGFL)%CNAME
!  
!    ENDDO
!  ELSEIF (IGFLTYP == 1) THEN
!    DO JGFL=1,YGFL%NUMFLDS
!      IF (.NOT.YGFL%YCOMP(JGFL)%LTHERMACT) CYCLE
!  
!      NACT = NACT+1
!      IPT(NACT) = YGFL%YCOMP(JGFL)%MP1
!      YR(NACT) = YGFL%YCOMP(JGFL)%R
!      YCP(NACT) = YGFL%YCOMP(JGFL)%RCP
!    ENDDO
!  ELSEIF (IGFLTYP == 5) THEN
!    DO JGFL=1,YGFL%NUMFLDS
!      IF (.NOT.YGFL%YCOMP(JGFL)%LTHERMACT) CYCLE
!  
!      NACT = NACT+1
!      IPT(NACT) = YGFL%YCOMP(JGFL)%MP5
!      YR(NACT) = YGFL%YCOMP(JGFL)%R
!      YCP(NACT) = YGFL%YCOMP(JGFL)%RCP
!    ENDDO
!  ELSEIF (IGFLTYP == 9) THEN
!    DO JGFL=1,YGFL%NUMFLDS
!      IF (.NOT.YGFL%YCOMP(JGFL)%LTHERMACT) CYCLE
!  
!      NACT = NACT+1
!      IPT(NACT) = YGFL%YCOMP(JGFL)%MP9_PH
!      YR(NACT) = YGFL%YCOMP(JGFL)%R
!      YCP(NACT) = YGFL%YCOMP(JGFL)%RCP
!    ENDDO
!  ELSEIF (IGFLTYP == 101) THEN
!    DO JGFL=1,YGFL%NUMFLDS
!      IF (.NOT.YGFL%YCOMP(JGFL)%LTHERMACT) CYCLE
!  
!      NACT = NACT+1
!      IPT(NACT) = YGFL%YCOMP(JGFL)%MP_SL1
!      YR(NACT) = YGFL%YCOMP(JGFL)%R
!      YCP(NACT) = YGFL%YCOMP(JGFL)%RCP
!    ENDDO
!  ELSE
!    CALL ABOR1("UNKNOWN GFL TYPE")
!  ENDIF
!  
!  
!  LLR = ASSOCIATED(ZR)
!  LLCP = ASSOCIATED(ZCP)
!  
!  ! note: mind the brackets on PGFL, in order to add RD at last (precise computes)
!  ! optim: explicit treatment of cases 0, 1, 2 and 3 (fewer loops)
!  IF (NACT == 0) THEN
!    IF (LLR) THEN
!      ZR(KST:KPROF,1:KFLEV) = RD
!    ENDIF
!    IF (LLCP) THEN
!      ZCP(KST:KPROF,1:KFLEV) = RCPD
!    ENDIF
!  ELSE IF (NACT == 1) THEN
!    IF (LLR) THEN
!      ZR(KST:KPROF,1:KFLEV) = RD+(YR(1)-RD)*PGFL(KST:KPROF,1:KFLEV,IPT(1))
!    ENDIF
!    IF (LLCP) THEN
!      ZCP(KST:KPROF,1:KFLEV) = RCPD+(YCP(1)-RCPD)*PGFL(KST:KPROF,1:KFLEV,IPT(1))
!    ENDIF
!  ELSE IF (NACT == 2) THEN
!    IF (LLR) THEN
!      ZR(KST:KPROF,1:KFLEV) = RD+((YR(1)-RD)*PGFL(KST:KPROF,1:KFLEV,IPT(1))+&
!       & (YR(2)-RD)*PGFL(KST:KPROF,1:KFLEV,IPT(2)))
!    ENDIF
!    IF (LLCP) THEN
!      ZCP(KST:KPROF,1:KFLEV) = RCPD+((YCP(1)-RCPD)*PGFL(KST:KPROF,1:KFLEV,IPT(1))+&
!       & (YCP(2)-RCPD)*PGFL(KST:KPROF,1:KFLEV,IPT(2)))
!    ENDIF
!  ELSE IF (NACT == 3) THEN
!    IF (LLR) THEN
!      ZR(KST:KPROF,1:KFLEV) = RD+((YR(1)-RD)*PGFL(KST:KPROF,1:KFLEV,IPT(1))+&
!       & (YR(2)-RD)*PGFL(KST:KPROF,1:KFLEV,IPT(2))+&
!       & (YR(3)-RD)*PGFL(KST:KPROF,1:KFLEV,IPT(3)))
!    ENDIF
!    IF (LLCP) THEN
!      ZCP(KST:KPROF,1:KFLEV) = RCPD+((YCP(1)-RCPD)*PGFL(KST:KPROF,1:KFLEV,IPT(1))+&
!       & (YCP(2)-RCPD)*PGFL(KST:KPROF,1:KFLEV,IPT(2))+&
!       & (YCP(3)-RCPD)*PGFL(KST:KPROF,1:KFLEV,IPT(3)))
!    ENDIF
!  ELSE
!    IF (LLR) THEN
!      ZR(KST:KPROF,1:KFLEV) = (YR(1)-RD)*PGFL(KST:KPROF,1:KFLEV,IPT(1))+&
!       & (YR(2)-RD)*PGFL(KST:KPROF,1:KFLEV,IPT(2))+&
!       & (YR(3)-RD)*PGFL(KST:KPROF,1:KFLEV,IPT(3))
!    ENDIF
!    IF (LLCP) THEN
!      ZCP(KST:KPROF,1:KFLEV) = (YCP(1)-RCPD)*PGFL(KST:KPROF,1:KFLEV,IPT(1))+&
!       & (YCP(2)-RCPD)*PGFL(KST:KPROF,1:KFLEV,IPT(2))+&
!       & (YCP(3)-RCPD)*PGFL(KST:KPROF,1:KFLEV,IPT(3))
!    ENDIF
!  
!    DO I=4,NACT-1
!      IF (LLR) THEN
!        ZR(KST:KPROF,1:KFLEV) = ZR(KST:KPROF,1:KFLEV)+&
!          (YR(I)-RD)*PGFL(KST:KPROF,1:KFLEV,IPT(I))
!      ENDIF
!      IF (LLCP) THEN
!        ZCP(KST:KPROF,1:KFLEV) = ZCP(KST:KPROF,1:KFLEV)+(YCP(I)-RCPD)*&
!         & PGFL(KST:KPROF,1:KFLEV,IPT(I))
!      ENDIF
!    ENDDO
!  
!    I=NACT
!    IF (LLR) THEN
!      ZR(KST:KPROF,1:KFLEV) = RD+(ZR(KST:KPROF,1:KFLEV)+&
!          (YR(I)-RD)*PGFL(KST:KPROF,1:KFLEV,IPT(I)))
!    ENDIF
!    IF (LLCP) THEN
!      ZCP(KST:KPROF,1:KFLEV) = RCPD+(ZCP(KST:KPROF,1:KFLEV)+(YCP(I)-RCPD)*&
!       & PGFL(KST:KPROF,1:KFLEV,IPT(I)))
!    ENDIF
!  ENDIF
!  
!  PRINT *, '--- ZCP ---'
!  DO JLEV = 1, KFLEV
!    JLON = 1
!    WRITE (*, '(I6," ",2E30.20," ",I6," ",E12.5)') JLEV, ZCP (JLON, JLEV), ZCP1 (JLON, JLEV), &
!   & COUNT (ZCP /= ZCP1), MAXVAL (ABS (ZCP - ZCP1))
!  ENDDO
!  
!  PRINT *, '--- ZR ---'
!  DO JLEV = 1, KFLEV
!    JLON = 1
!    WRITE (*, '(I6," ",2E30.20," ",I6," ",E12.5)') JLEV, ZR (JLON, JLEV), ZR1 (JLON, JLEV), &
!   & COUNT (ZR /= ZR1), MAXVAL (ABS (ZR - ZR1))
!  ENDDO


IF (PRESENT(PKAP)) PKAP(KST:KPROF,1:KFLEV)=ZR(KST:KPROF,1:KFLEV)/ZCP(KST:KPROF,1:KFLEV)

IF (LHOOK) CALL DR_HOOK("GPRCP_YDVARS",1,ZHOOK)

END SUBROUTINE GPRCP_YDVARS

