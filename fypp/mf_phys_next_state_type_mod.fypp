#:mute
#:set config_file = os.path.dirname(_THIS_FILE_) + '/field_config.yaml'
#:set config = field_config.VariableConfiguration(config_file)
#:set gfl = config.groups['GFL'] 

#:endmute
MODULE MF_PHYS_NEXT_STATE_TYPE_MOD

USE PARKIND1, ONLY : JPIM, JPRB
USE FIELD_MODULE
USE CPG_DIM_TYPE_MOD, ONLY : CPG_DIM_VARS_TYPE
IMPLICIT NONE

TYPE MF_PHYS_NEXT_STATE_TYPE

  REAL (KIND=JPRB), POINTER, CONTIGUOUS :: U (:, :) => NULL ()
!>REAL (KIND=JPRB)                      :: U (NPROMA,YDCPG_DIM%VARS%U%ILEVT1I:YDCPG_DIM%VARS%U%ILEVT1F)
  TYPE (FIELD_3D), POINTER :: F_U => NULL ()
  REAL (KIND=JPRB), POINTER, CONTIGUOUS :: V (:, :) => NULL ()
!>REAL (KIND=JPRB)                      :: V (NPROMA,YDCPG_DIM%VARS%V%ILEVT1I:YDCPG_DIM%VARS%ILEVT1F)
  TYPE (FIELD_3D), POINTER :: F_V => NULL ()
  REAL (KIND=JPRB), POINTER, CONTIGUOUS :: T (:, :) => NULL ()
!>REAL (KIND=JPRB)                      :: T (NPROMA,YDCPG_DIM%VARS%T%ILEVT1I:YDCPG_DIM%VARS%T%ILEVT1F)
  TYPE (FIELD_3D), POINTER :: F_T => NULL ()
  REAL (KIND=JPRB), POINTER, CONTIGUOUS :: SVD (:, :) => NULL ()
!>REAL (KIND=JPRB)                      :: SVD (NPROMA,YDCPG_DIM%VARS%SVD%ILEVT1I:YDCPG_DIM%VARS%SVD%ILEVT1F)
  TYPE (FIELD_3D), POINTER :: F_SVD => NULL ()
  REAL (KIND=JPRB), POINTER, CONTIGUOUS :: SP (:) => NULL ()
!>REAL (KIND=JPRB)                      :: SP (NPROMA)
  TYPE (FIELD_2D), POINTER :: F_SP => NULL ()

#:for v in gfl.variables
  #:if v.array
  #:elif v.dim == 3
  REAL (KIND=JPRB), POINTER, CONTIGUOUS :: ${v.name}$ (${', '.join ([':'] * (v.dim-1))}$) => NULL ()
!>REAL (KIND=JPRB), POINTER, CONTIGUOUS :: ${v.name}$ (NPROMA,YDCPG_DIM%VARS%${v.name}$%ILEVT1I:YDCPG_DIM%VARS%${v.name}$%ILEVT1F)
  TYPE (FIELD_3D), POINTER :: F_${v.name}$ => NULL ()
  #:endif
#:endfor


  TYPE (CPG_DIM_VARS_TYPE) :: DIMS

CONTAINS

  PROCEDURE :: INIT => MF_PHYS_NEXT_STATE_TYPE_INIT
  PROCEDURE :: UPDATE_VIEW => MF_PHYS_NEXT_STATE_TYPE_UPDATE_VIEW

END TYPE MF_PHYS_NEXT_STATE_TYPE

CONTAINS

SUBROUTINE MF_PHYS_NEXT_STATE_TYPE_INIT (SELF, YDCPG_SL1, YDGEOMETRY, YDVARS, YDMODEL)

USE GEOMETRY_MOD, ONLY : GEOMETRY
USE YOMCT0, ONLY : LSLAG, LTWOTL
USE FIELD_VARIABLES_MOD, ONLY: FIELD_VARIABLES
USE CPG_TYPE_MOD, ONLY : CPG_SL1_TYPE
USE TYPE_MODEL  , ONLY : MODEL

CLASS (MF_PHYS_NEXT_STATE_TYPE)                :: SELF
TYPE (CPG_SL1_TYPE),    INTENT (INOUT), TARGET :: YDCPG_SL1
TYPE(GEOMETRY),         INTENT(IN)             :: YDGEOMETRY
TYPE (FIELD_VARIABLES), INTENT (INOUT), TARGET :: YDVARS
TYPE(MODEL),            INTENT (IN)            :: YDMODEL

ASSOCIATE (YDDYN => YDMODEL%YRML_DYN%YRDYN)

CALL SELF%DIMS%INIT (YDGEOMETRY, YDMODEL, YDVARS)

IF (LSLAG) THEN

  ! Taken from cp_ptrslb1.F90
  
  IF (YDDYN%NWLAG == 4) THEN
    SELF%U   => YDCPG_SL1%U0 
    SELF%F_U => YDCPG_SL1%F_U0
    SELF%V   => YDCPG_SL1%V0 
    SELF%F_V => YDCPG_SL1%F_V0
  ELSE
    IF (YDDYN%NSPLTHOI /= 0) THEN
      SELF%U   => YDCPG_SL1%UF9 
      SELF%F_U => YDCPG_SL1%F_UF9 
      SELF%V   => YDCPG_SL1%VF9 
      SELF%F_V => YDCPG_SL1%F_VF9 
    ELSE
      SELF%U   => YDCPG_SL1%U9 
      SELF%F_U => YDCPG_SL1%F_U9 
      SELF%V   => YDCPG_SL1%V9 
      SELF%F_V => YDCPG_SL1%F_V9 
    ENDIF
  ENDIF
  ! * temperature
  IF (YDDYN%NTLAG == 4) THEN
    SELF%T   => YDCPG_SL1%T0 
    SELF%F_T => YDCPG_SL1%F_T0 
  ELSE
    IF (YDDYN%NSPLTHOI /= 0) THEN
      SELF%T   => YDCPG_SL1%TF9 
      SELF%F_T => YDCPG_SL1%F_TF9 
    ELSE
      SELF%T   => YDCPG_SL1%T9 
      SELF%F_T => YDCPG_SL1%F_T9 
    ENDIF
  ENDIF
  ! * vertical divergence
  IF (YDDYN%NSVDLAG == 4) THEN
    SELF%SVD   => YDCPG_SL1%VD0
    SELF%F_SVD => YDCPG_SL1%F_VD0
  ELSE
    IF (YDDYN%NSPLTHOI /= 0) THEN
      SELF%SVD   => YDCPG_SL1%VDF9
      SELF%F_SVD => YDCPG_SL1%F_VDF9
    ELSE
      SELF%SVD   => YDCPG_SL1%VD9
      SELF%F_SVD => YDCPG_SL1%F_VD9
    ENDIF
  ENDIF

  SELF%SP   => YDCPG_SL1%SP9
  SELF%F_SP => YDCPG_SL1%F_SP9

  ! * GFL arrays
  IF (YDDYN%LSPLTHOIGFL.OR.(YDDYN%NSPLTHOI /= 0)) THEN
#:for v in gfl.variables
  #:if v.array
  #:elif v.dim == 3
    IF (YDVARS%${v.name}$%LADV) THEN
      SELF%${v.name}$   => YDCPG_SL1%${v.name}$_F
      SELF%F_${v.name}$ => YDCPG_SL1%F_${v.name}$_F
    ELSE
      SELF%${v.name}$   => YDVARS%${v.name}$%T1
      SELF%F_${v.name}$ => YDVARS%${v.name}$%FT1
    ENDIF
  #:endif
#:endfor
  ELSE
#:for v in gfl.variables
  #:if v.array
  #:elif v.dim == 3
    IF (YDVARS%${v.name}$%LADV) THEN
      SELF%${v.name}$   => YDCPG_SL1%${v.name}$
      SELF%F_${v.name}$ => YDCPG_SL1%F_${v.name}$
    ELSE
      SELF%${v.name}$   => YDVARS%${v.name}$%T1
      SELF%F_${v.name}$ => YDVARS%${v.name}$%FT1
    ENDIF
  #:endif
#:endfor
  ENDIF  

ELSE

  SELF%U     => YDVARS%U%T1
  SELF%F_U   => YDVARS%U%FT1
  SELF%V     => YDVARS%V%T1
  SELF%F_V   => YDVARS%V%FT1
  SELF%T     => YDVARS%T%T1
  SELF%F_T   => YDVARS%T%FT1
  SELF%SVD   => YDVARS%SVD%T1
  SELF%F_SVD => YDVARS%SVD%FT1
  SELF%SP    => YDVARS%SP%T1
  SELF%F_SP  => YDVARS%SP%FT1

#:for v in gfl.variables
  #:if v.array
  #:elif v.dim == 3
  SELF%${v.name}$   => YDVARS%${v.name}$%T1
  SELF%F_${v.name}$ => YDVARS%${v.name}$%FT1
  #:endif
#:endfor

ENDIF

END ASSOCIATE

END SUBROUTINE MF_PHYS_NEXT_STATE_TYPE_INIT

SUBROUTINE MF_PHYS_NEXT_STATE_TYPE_UPDATE_VIEW (SELF, BLOCK_INDEX)
CLASS (MF_PHYS_NEXT_STATE_TYPE)              :: SELF
INTEGER(KIND=JPIM), INTENT (IN)   :: BLOCK_INDEX

IF (ASSOCIATED (SELF%F_U)) THEN
  SELF%U (1:, SELF%DIMS%U%ILEVT1I:) => SELF%F_U%GET_VIEW (BLOCK_INDEX)
ENDIF

IF (ASSOCIATED (SELF%F_V)) THEN
  SELF%V (1:, SELF%DIMS%V%ILEVT1I:) => SELF%F_V%GET_VIEW (BLOCK_INDEX)
ENDIF

IF (ASSOCIATED (SELF%F_T)) THEN
  SELF%T (1:, SELF%DIMS%T%ILEVT1I:) => SELF%F_T%GET_VIEW (BLOCK_INDEX)
ENDIF

IF (ASSOCIATED (SELF%F_SVD)) THEN
  SELF%SVD (1:, SELF%DIMS%SVD%ILEVT1I:) => SELF%F_SVD%GET_VIEW (BLOCK_INDEX)
ENDIF

#:for v in gfl.variables
  #:if v.array
  #:elif v.dim == 3
IF (ASSOCIATED (SELF%F_${v.name}$)) THEN
  SELF%${v.name}$ (1:, SELF%DIMS%${v.name}$%ILEVT1I:) => SELF%F_${v.name}$%GET_VIEW (BLOCK_INDEX)
ENDIF
  #:endif
#:endfor

END SUBROUTINE MF_PHYS_NEXT_STATE_TYPE_UPDATE_VIEW 

END MODULE MF_PHYS_NEXT_STATE_TYPE_MOD
